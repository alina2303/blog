<?xml version="1.0" encoding="UTF-8" ?>
<post>
  <title>Password validation in C#</title>
  <excerpt>Create a method for password validation with C# to verify that password meets 7 basic requirements of the strong password</excerpt>
  <date>2022-08-19</date>
  <categories>
    <category>Programming</category>
  </categories>
  <tags></tags>
  <author>
    <name>Alina</name>
    <picture>/assets/blog/authors/alina.jpeg</picture>
  </author>
  <content>
  <![CDATA[<!-- wp:paragraph -->
<p>This is a method for password validation in C#. The password should meet following requirements </p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>At least one lower case letter</li><li>At least one upper case letter</li><li>At least special character</li><li>At least one number</li><li>At least 8 characters</li><li>Can not be more than 32 characters</li><li>Can not contain space</li></ul>
<!-- /wp:list -->

<!-- wp:loos-hcb/code-block {"langType":"csharp","langName":"C#","fileName":"PasswordValidation.cs"} -->
<div class="hcb_wrap"><pre class="prism undefined-numbers lang-csharp" data-file="PasswordValidation.cs" data-lang="C#"><code>using CSharpFunctionalExtensions;

public static Result MatchPasswordMinimumCriteria(this CreateUser user)
    {
        if (user.Password.IsShorterThen(8))
        {
            return Result.Failure(&quot;Password cannot be less then 8 characters&quot;);
        }
        
        if (user.Password.IsLongerThen(32))
        {
            return Result.Failure(&quot;Password cannot be more then 32 characters&quot;);
        }

        if (user.Password.Contains(&quot; &quot;))
        {
            return Result.Failure(&quot;Password cannot contain space&quot;);
        }

        bool uppercaseCharacter = false;
        bool lowerCaseCharacter = false;
        bool number = false;
        bool specialCharacter = false;

        string specialCharacterString = @&quot;%!@#$%^&*()?/&gt;.&lt;,:;&#39;\|}]{[_~`+=-&quot; + &quot;\&quot;&quot;;
        HashSet&lt;char&gt; specialCharacters =  specialCharacterString.ToCharArray().ToHashSet();
        
        foreach (var character in user.Password)
        {
            if (uppercaseCharacter && lowerCaseCharacter && number &&    specialCharacter)
            {
                break;
            }

            if (number == false && character.IsInteger())
            {
                number = true;
                continue;
            }

            if (lowerCaseCharacter == false && character.IsLower())
            {
                lowerCaseCharacter = true;
                continue;
            }
            
            if (uppercaseCharacter == false && character.IsUpper())
            {
                uppercaseCharacter = true;
                continue;
            }

            if (specialCharacter == false && specialCharacters.Contains(character))
            {
                specialCharacter = true;
            }
        }

        if (lowerCaseCharacter == false)
        {
            return Result.Failure(&quot;Password must contain lowercase character&quot;);
        }
        
        if (uppercaseCharacter == false)
        {
            return Result.Failure(&quot;Password must contain uppercase character&quot;);
        }
        
        if (number == false)
        {
            return Result.Failure(&quot;Password must contain number&quot;);
        }
        
        if (specialCharacter == false)
        {
            return Result.Failure(&quot;Password must contain special character&quot;);
        }
        
        return Result.Success();
    }  </code></pre></div>
<!-- /wp:loos-hcb/code-block -->

<!-- wp:paragraph -->
<p>For better readability the method above can be split into multiple methods.</p>
<!-- /wp:paragraph -->

<!-- wp:loos-hcb/code-block {"langType":"csharp","langName":"C#","fileName":"FluentValidationStrings.cs"} -->
<div class="hcb_wrap"><pre class="prism undefined-numbers lang-csharp" data-file="FluentValidationStrings.cs" data-lang="C#"><code>public static class FluentValidationStrings
{
    public static bool IsLongerThen(this string text, int minimumLength)
    {
        return minimumLength &lt; text.Length;
    }

    public static bool IsLongerOrEqualThen(this string text, int minimumLength)
    {
        return minimumLength &lt;= text.Length;
    }

    public static bool IsShorterThen(this string text, int maximumLength)
    {
        return maximumLength &gt; text.Length;
    }

    public static bool IsShorterOrEqualThen(this string text, int maximumLength)
    {
        return maximumLength &gt;= text.Length;
    }

    public static bool IsEmpty(this string? text)
    {
        return text == &quot;&quot;;
    }

    public static bool IsNotEmpty(this string? text)
    {
        return text != &quot;&quot;;
    }

    public static bool IsNullOrEmpty(this string? text)
    {
        return string.IsNullOrEmpty(text);
    }

    public static bool IsNotNullOrEmpty(this string? text)
    {
        return !string.IsNullOrEmpty(text);
    }
}</code></pre></div>
<!-- /wp:loos-hcb/code-block -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]>
  </content>
</post>